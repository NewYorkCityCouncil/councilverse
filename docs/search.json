[{"path":"/articles/councilverse.html","id":"data-example","dir":"Articles","previous_headings":"","what":"Data Example","title":"councilverse","text":"Install Package Load Package Example Project Using CouncilVerse, CouncilVerse (CouncilCount) Functions","code":"# replace councilverse with councildown if you only want councildown remotes::install_github(\"newyorkcitycouncil/councilverse\") library(tidyverse) library(leaflet) # load last; councilverse contains councildown library(councilverse)"},{"path":"/articles/councilverse.html","id":"load-councilcount-data","dir":"Articles","previous_headings":"Data Example","what":"Load CouncilCount Data","title":"councilverse","text":"CouncilCount data part CouncilVerse package. use data example make plots maps.","code":"# councilverse::get_census_variables to check available variables census_vars <- get_census_variables() # councilverse::get_geo_estimates to read in council district data for % work from home using 2013 council boundaries # borough, communitydist, councildist, nta, policeprct, schooldist geographies are available council_geo <- get_geo_estimates(\"councildist\", var_codes = \"DP03_0024E\", boundary_year = \"2013\")"},{"path":"/articles/councilverse.html","id":"visualize-data-and-determine-map-breaks","dir":"Articles","previous_headings":"Data Example","what":"Visualize Data and Determine Map Breaks","title":"councilverse","text":"","code":"# check distribution of data (no councildown additions yet) wfh_hist <- ggplot(data = council_geo, aes(percent_work_from_home_workers_16_and_older)) + geom_histogram(bins = 30) # use fisher-jenks natural breaks after visualizing data nat_intvl = classInt::classIntervals(council_geo$percent_work_from_home_workers_16_and_older, n = 5, style = 'fisher') # visualize breaks using councilcount functions and styling ggplot(data = council_geo, aes(percent_work_from_home_workers_16_and_older)) +   # use first color from nycc_palette \"main\" for the histogram bars   geom_histogram(bins = 30, aes(fill=pal_nycc(\"main\")[1])) +   # use last color from nycc_palette \"main\" for the breaks   geom_vline(xintercept = nat_intvl$brks, color = pal_nycc(\"main\")[6]) +   labs(     x = \"% Work From Home\",     y = \"Count\",     title = \"Histogram of Data\",     color = \"\"   ) +   # councildown::theme_nycc() for styling   theme_nycc() +   theme(legend.position=\"none\")"},{"path":"/articles/councilverse.html","id":"make-palette-for-map","dir":"Articles","previous_headings":"Data Example","what":"Make Palette for Map","title":"councilverse","text":"","code":"# councildown::colorBin has default options for palette, bins, and na.color pal_council = colorBin(   # use nycc_blue, which is the default palette for councildown::colorBin   palette = \"nycc_blue\",   # note: make sure rounding doesn't leave out any data in the bottom or top bin   bins = round(nat_intvl$brks,2),   domain = council_geo$percent_work_from_home_workers_16_and_older,   # use the default NA color for councildown::colorBin   na.color = \"#FFFFFF\" )"},{"path":"/articles/councilverse.html","id":"create-map","dir":"Articles","previous_headings":"Data Example","what":"Create Map","title":"councilverse","text":"","code":"map <- leaflet() %>%   # councildown::addCouncilStyle() for styling   addCouncilStyle() %>%   # councildown::addPolygons has default smoothFactor and weight   addPolygons(data = council_geo,               fillColor = ~pal_council(percent_work_from_home_workers_16_and_older),               fillOpacity = 1,               # councildown::councilPopup to style popups               label = ~lapply(councilPopup(                 paste0(\"<h3>\", paste0(\"CD: \",councildist13), \"<\/h3>\",                        \"<p>\", paste0(\"Work From Home: \", percent_work_from_home_workers_16_and_older, \"%\"), \"<\/p>\")),                 htmltools::HTML)) %>%   # councildown::addLegend_decreasing to change the default ordering of the legend   addLegend_decreasing(position = \"topleft\", pal = pal_council,                        title = paste0(\"% Work From Home\"),                        values = c(0,1), opacity = 1, decreasing = T,                        labFormat = labelFormat(suffix = \"%\"),                        na.label = \"NA\") %>%   # councildown::addSourceText to add text on bottom left for source   addSourceText(\"Source: NYCC Data Team\") map # add districts for 2013 or 2023 map_w_dists <- map %>%   # councildown::addCouncilStyle has options to add 2013 or 2023 council districts to map   addCouncilStyle(add_dists = T, dist_year = \"2023\")  # note: can access cd shapefiles by themselves councildown::nycc_cd_13 # 2013 council district lines councildown::nycc_cd_23 # 2023 council district lines"},{"path":"/articles/councilverse.html","id":"save-map","dir":"Articles","previous_headings":"Data Example","what":"Save Map","title":"councilverse","text":"","code":"# councildown::mapshot has default zoom, vwidth, vheight, remove_controls map_png <- file_name_generator(description = \"council_district_percent_work_from_home\", date_year = 2022, file_extension = \".png\") mapshot(map, file = glue::glue(\"visuals/{map_png}\"))  map_html <- file_name_generator(description = \"council_district_percent_work_from_home\", date_year = 2022, file_extension = \".html\") # save leaflet html (function not a part of councilverse) htmlwidgets::saveWidget(map, file=glue::glue(\"visuals/{map_html}\"), selfcontained = T)"},{"path":"/articles/councilverse.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"councilverse","text":"CouncilVerse CouncilCount CouncilDown","code":""},{"path":"/articles/councilverse.html","id":"graphs-and-tables","dir":"Articles","previous_headings":"Reference","what":"Graphs and Tables","title":"councilverse","text":"encodeGraphic() – Graphics raw HTML gt_table() – gt table raw HTML helper function","code":""},{"path":"/articles/councilverse.html","id":"misc","dir":"Articles","previous_headings":"Reference","what":"Misc","title":"councilverse","text":"file_name_generator() – Helper function creating file names using accepted guidelines unzip_sf() – Helper function loading shapefiles come zipped","code":""},{"path":"/articles/councilverse.html","id":"population-estimates","dir":"Articles","previous_headings":"Reference","what":"Population Estimates","title":"councilverse","text":"get_bbl_estimates() – Generates dataframe provides population estimates point level (also columns various geographies, like council district) get_census_variables() – Provides information ACS demographic variables can accessed using get_geo_estimates() via variable codes get_geo_estimates() – Creates dataframe provides population estimates selected demographic variables along chosen geographic boundaries (e.g. council district, borough, etc.)","code":""},{"path":"/articles/councilverse.html","id":"plots","dir":"Articles","previous_headings":"Reference","what":"Plots","title":"councilverse","text":"theme_nycc() – ggplot2 theme uses Council fonts style guidelines produce plots scale_fill_nycc(), scale_color_nycc() – Color fill scales ggplot2 plots. Used replace scale_color_discrete(), scale_color_continuous(), scale_fill_discrete(), scale_fill_continuous()","code":""},{"path":"/articles/councilverse.html","id":"colors","dir":"Articles","previous_headings":"Reference","what":"Colors","title":"councilverse","text":"pal_nycc() – Makes color palette using Council colors nycc_pal() DEPRECATED. Use pal_nycc instead","code":""},{"path":"/articles/councilverse.html","id":"maps","dir":"Articles","previous_headings":"Reference","what":"Maps","title":"councilverse","text":"addCouncilStyle() – Adds Council styles including tiles, council district outlines, fonts leaflet map addSourceText() – Adds Council “Source” note bottom right leaflet map addPolygons() – leaflet function addPolygons default smoothFactor weight colorBin() – leaflet function colorBin default palette, bins, na.color councilPopup() – Basic styling leaflet popups mapshot() – Saves leaflet maps static png image defaults map saves standardized width, height, zoom addLegend_decreasing() – leaflet function addLegend option highest number top legend","code":""},{"path":"/articles/councilverse.html","id":"data","dir":"Articles","previous_headings":"Reference","what":"Data","title":"councilverse","text":"nycc_cd_13 – 2013-2023 NYC Council District sf collection nycc_cd_23 – 2023-2033 NYC Council District sf collection","code":""},{"path":"/articles/councilverse.html","id":"templates","dir":"Articles","previous_headings":"Reference","what":"Templates","title":"councilverse","text":"council_html() – Render Council HTML report council_pdf() – Render Council PDF report","code":""},{"path":"/articles/councilverse.html","id":"misc-1","dir":"Articles","previous_headings":"Reference","what":"Misc","title":"councilverse","text":"pretty_date – Make pretty date","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). councilverse: Easily Install Load packages 'councilverse'. R package version 2.0.0.","code":"@Manual{,   title = {councilverse: Easily Install and Load all packages in the 'councilverse'},   author = {First Last},   year = {2024},   note = {R package version 2.0.0}, }"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Easily Install and Load all packages in the councilverse","title":"Easily Install and Load all packages in the councilverse","text":"councilverse set packages work tandem assist NYCC’s data team work. package designed make easy install load multiple ‘councilverse’ packages single step.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easily Install and Load all packages in the councilverse","text":"can install released version councilverse GitHub","code":"remotes::install_github(\"newyorkcitycouncil/councilverse\")"},{"path":"/index.html","id":"load-package","dir":"","previous_headings":"","what":"Load Package","title":"Easily Install and Load all packages in the councilverse","text":"Note order loading libraries important. Make sure load councilverse last.","code":"library(tidyverse) # load last library(councilverse)"},{"path":"/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Easily Install and Load all packages in the councilverse","text":"demo 2 largest packages (councildown councilcount) available councilverse, see vignettes/councilverse.Rmd","code":""},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Easily Install and Load all packages in the councilverse","text":"First load councilverse package .","code":""},{"path":"/index.html","id":"councildown","dir":"","previous_headings":"Quick Start","what":"Councildown","title":"Easily Install and Load all packages in the councilverse","text":"councildown package implements style guide compliant defaults R Markdown documents, ggplot2 plots, leaflet maps. information, please visit package directly: https://github.com/NewYorkCityCouncil/councildown/ . councilverse vignette goes example using councildown’s available functions.","code":""},{"path":"/index.html","id":"councilcount","dir":"","previous_headings":"Quick Start","what":"Councilcount","title":"Easily Install and Load all packages in the councilverse","text":"councilcount package allows easy access ACS population data across various geographic boundaries. boundaries native ACS, council districts, estimate provided. information, please visit package directly:","code":""},{"path":"/index.html","id":"overview-1","dir":"","previous_headings":"","what":"Overview","title":"Easily Install and Load all packages in the councilverse","text":"councilcount package allows easy access population data around 70 demographic groups across various NYC geographic boundaries. data pulled 2017-2021 5-Year American Community Survey. geographic boundaries included ACS, like council districts, estimates generated.","code":""},{"path":"/index.html","id":"installation-1","dir":"","previous_headings":"","what":"Installation","title":"Easily Install and Load all packages in the councilverse","text":"can install released version councilcount GitHub","code":"remotes::install_github(\"newyorkcitycouncil/councilcount\")"},{"path":"/index.html","id":"load-package-1","dir":"","previous_headings":"","what":"Load Package","title":"Easily Install and Load all packages in the councilverse","text":"Note order loading libraries important. Make sure load councilcount last.","code":"library(tidyverse) # load last library(councilcount)"},{"path":"/index.html","id":"vignette-1","dir":"","previous_headings":"","what":"Vignette","title":"Easily Install and Load all packages in the councilverse","text":"demos functions included councilcount, please visit vignettes/councilverse.Rmd.","code":""},{"path":"/index.html","id":"quick-start-1","dir":"","previous_headings":"","what":"Quick Start","title":"Easily Install and Load all packages in the councilverse","text":"First load councilcount package .","code":""},{"path":[]},{"path":"/index.html","id":"r","dir":"","previous_headings":"Quick Start > Functions","what":"R","title":"Easily Install and Load all packages in the councilverse","text":"councilcount includes 3 functions: get_bbl_estimates() – Generates dataframe provides population estimates point level (also columns various geographies, like council district) get_census_variables() – Provides information ACS demographic variables can accessed using get_geo_estimates() via variable codes get_geo_estimates() – Creates dataframe provides population estimates selected demographic variables along chosen geographic boundaries (e.g. council district, borough, etc.) Simply run get_bbl_estimates() get_census_variables() access desired dataframes. require inputs. get_geo_estimates() 3 parameters: geo – desired geographic region. Please select following list: “councildist”, “communitydist”, “schooldist”, “policeprct”, “nta”, “borough” var_codes – desired demographic group(s), represented ACS variable code. access list available demographic variables codes, please run get_census_variables() boundary_year – “councildist” selected, boundary year must specified 2013 2023. default 2013. example, codes “Female” “Adults Bachelor’s degree higher” used. data requested along 2023 Council District boundaries.","code":"vars <- c('DP05_0003PE', 'DP02_0068E') get_geo_estimates(geo = \"councildist\", var_codes = vars, boundary_year = \"2023\")"},{"path":"/index.html","id":"python","dir":"","previous_headings":"Quick Start > Functions","what":"Python","title":"Easily Install and Load all packages in the councilverse","text":"equivalent functions also available Python. access , use following code: get_bbl_estimates() get_census_variables() function R Python. However, get_geo_estimates() differences Python. Instead separate parameters geo boundary year, two input options Council Districts, “councildist13” “councildist23.” Data New York City whole also available using “nyc” geo. Otherwise, geo input options . also two additional parameters, polygons download, defaults set False. polygons set True, dataframe include column geometries associated geographic region. download set True, dataframe automatically download CSV function runs.","code":"import sys # set absolute path to councilverse/inst/python location sys.path.insert(0, \"/{YOUR PATH}/councilverse/inst/python\") from retrieve_estimates import get_bbl_estimates, get_census_variables, get_geo_estimates"},{"path":"/reference/census_demo_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Census Demographic Variables — census_demo_variables","title":"Census Demographic Variables — census_demo_variables","text":"Census Demographic Variables","code":""},{"path":"/reference/census_demo_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Census Demographic Variables — census_demo_variables","text":"","code":"census_demo_variables"},{"path":[]},{"path":"/reference/census_demo_variables.html","id":"census-demo-variables","dir":"Reference","previous_headings":"","what":"census_demo_variables","title":"Census Demographic Variables — census_demo_variables","text":"data frame 68 rows 2 columns: var_code Census Variable Code var_name Census Variable Name","code":""},{"path":"/reference/councilverse_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"List all packages imported by councilverse — councilverse_packages","title":"List all packages imported by councilverse — councilverse_packages","text":"List packages imported councilverse","code":""},{"path":"/reference/councilverse_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all packages imported by councilverse — councilverse_packages","text":"","code":"councilverse_packages()"},{"path":"/reference/councilverse_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all packages imported by councilverse — councilverse_packages","text":"","code":"councilverse_packages() #> [1] \"cli\"         \"councildown\" \"crayon\"      \"rstudioapi\"  \"utils\"       #> [6] \"reticulate\""},{"path":"/reference/encodeGraphic.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphics to raw HTML — encodeGraphic","title":"Graphics to raw HTML — encodeGraphic","text":"Helper function convert plot image raw HTML","code":""},{"path":"/reference/encodeGraphic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphics to raw HTML — encodeGraphic","text":"","code":"encodeGraphic(g, style = \"style=\\\"width:150px;height:100px\\\"\", ...)"},{"path":"/reference/encodeGraphic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphics to raw HTML — encodeGraphic","text":"g plot image object. style html style, default set width 150px height 100px ...","code":""},{"path":"/reference/encodeGraphic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphics to raw HTML — encodeGraphic","text":"Raw HTML image","code":""},{"path":"/reference/file_name_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for creating file names using accepted guidelines — file_name_generator","title":"Helper function for creating file names using accepted guidelines — file_name_generator","text":"Order file run (00-10) Dataset Name, Source, Location Time granularity (hourly, daily, minutely, yearly, etc.) Grouping categorizer ex ‘-age’, ‘-cd’, ‘-cd-age’ Date Year","code":""},{"path":"/reference/file_name_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for creating file names using accepted guidelines — file_name_generator","text":"","code":"file_name_generator(   order = NULL,   description = NULL,   time_granularity = NULL,   disaggregation_categories = NULL,   date_year = NULL,   file_extension = NULL,   ... )"},{"path":"/reference/file_name_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for creating file names using accepted guidelines — file_name_generator","text":"order (string). sequential number ## format (applicable) file run description (string). dateset name, source, location time_granularity (string). Time granularity (e.g. 'hourly', 'daily', 'minutely', 'yearly', etc.) disaggregation_categories (string). Grouping categorizer; accepts vectors (e.g. 'age','cd',c('age','cd')) date_year (numeric). Date year file_extension (string). File extension (e.g. \".csv\") ... Add anything else back file name file extension","code":""},{"path":"/reference/file_name_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for creating file names using accepted guidelines — file_name_generator","text":"string file output name","code":""},{"path":"/reference/file_name_generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for creating file names using accepted guidelines — file_name_generator","text":"","code":"if (FALSE) { # All fields used file_name_generator(order = \"01\", description = \"acs_poverty\", time_granularity = \"daily\", disaggregation_categories = c(\"cd\", \"race\"), date_year = 2018, file_extension = \".R\",... = \"example\") # Shorter example file_name_generator(description = \"puma_internet\", date_year = 2022) }"},{"path":"/reference/get_ACS_demographic_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","title":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","text":"Get estimates census variables specified geographies","code":""},{"path":"/reference/get_ACS_demographic_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","text":"","code":"get_ACS_demographic_estimates(   var_code_list,   geo,   polygons = FALSE,   download = FALSE )"},{"path":"/reference/get_ACS_demographic_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","text":"var_code_list vector list. variable codes interest geo string. Desired geographic boundaries (options: council, policeprct, schooldist, cd, nta, schooldist, borough, nyc) polygons boolean. polygons = TRUE add geometry column. default polygons = FALSE download boolean. download = TRUE download output df current working directory csv. default download = FALSE","code":""},{"path":"/reference/get_ACS_demographic_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","text":"DataFrame requested variables","code":""},{"path":"/reference/get_ACS_demographic_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get estimates for census variables for specified geographies — get_ACS_demographic_estimates","text":"","code":"if (FALSE) { library(councilverse) get_ACS_demographic_estimates(c(\"DP02_0078E\",\"DP05_0002PE\",\"DP05_0008PE\"),geo = \"nta\",polygons = TRUE) get_ACS_demographic_estimates(\"DP05_0008PE\",geo = \"council\",download = TRUE) }"},{"path":"/reference/get_BBL_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retrieve PLUTO bbl population estimates — get_bbl_estimates","title":"Function to retrieve PLUTO bbl population estimates — get_bbl_estimates","text":"Function retrieve PLUTO bbl population estimates","code":""},{"path":"/reference/get_BBL_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retrieve PLUTO bbl population estimates — get_bbl_estimates","text":"","code":"get_bbl_estimates()"},{"path":"/reference/get_BBL_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to retrieve PLUTO bbl population estimates — get_bbl_estimates","text":"tibble PLUTO bbl population estimates","code":""},{"path":"/reference/get_census_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retrieve the available census demographic variables — get_census_variables","title":"Function to retrieve the available census demographic variables — get_census_variables","text":"Function retrieve available census demographic variables","code":""},{"path":"/reference/get_census_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retrieve the available census demographic variables — get_census_variables","text":"","code":"get_census_variables()"},{"path":"/reference/get_census_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to retrieve the available census demographic variables — get_census_variables","text":"data frame available variables","code":""},{"path":"/reference/get_geo_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retrieve acs estimates from csvs at different geographies — get_geo_estimates","title":"Function to retrieve acs estimates from csvs at different geographies — get_geo_estimates","text":"Function retrieve acs estimates csvs different geographies","code":""},{"path":"/reference/get_geo_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retrieve acs estimates from csvs at different geographies — get_geo_estimates","text":"","code":"get_geo_estimates(geo = NULL, var_codes = \"all\", boundary_year = NULL)"},{"path":"/reference/get_geo_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to retrieve acs estimates from csvs at different geographies — get_geo_estimates","text":"geo (string). Name geography associated csv \"extdata\". NULL, returns list possible geography csvs. Options: \"borough\", \"communitydist\", \"councildist\", \"nta\", \"policeprct\", \"schooldist\". var_codes (list). List chosen variable codes, selected get_census_variables. wish select variable codes, input \"\" (also default value). boundary_year (string). Year geographic boundary (.e. geo). Currently relevant council districts, options \"2013\" \"2023\".","code":""},{"path":"/reference/get_geo_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to retrieve acs estimates from csvs at different geographies — get_geo_estimates","text":"sf specified geography, message list geographies none specified","code":""},{"path":"/reference/gt_table.html","id":null,"dir":"Reference","previous_headings":"","what":"gt table to raw HTML helper function — gt_table","title":"gt table to raw HTML helper function — gt_table","text":"Helper function convert gt tables raw HTML side--side comparisons","code":""},{"path":"/reference/gt_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gt table to raw HTML helper function — gt_table","text":"","code":"gt_table(x, currency_col = NA, percent_col = NA, extra_formats = NULL)"},{"path":"/reference/gt_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gt table to raw HTML helper function — gt_table","text":"x gt table currency_col add currency formatting columns specified percent_col add percent formatting columns specified extra_formats add additional formatting","code":""},{"path":"/reference/gt_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gt table to raw HTML helper function — gt_table","text":"Raw HTML gt table","code":""},{"path":"/reference/unzip_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for loading in shapefiles that come zipped — unzip_sf","title":"Helper function for loading in shapefiles that come zipped — unzip_sf","text":"Helper function loading shapefiles come zipped","code":""},{"path":"/reference/unzip_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for loading in shapefiles that come zipped — unzip_sf","text":"","code":"unzip_sf(zip_url)"},{"path":"/reference/unzip_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for loading in shapefiles that come zipped — unzip_sf","text":"zip_url url file need download unzip ","code":""},{"path":"/reference/unzip_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for loading in shapefiles that come zipped — unzip_sf","text":"temporary path file stored , ready pass st_read() ","code":""},{"path":"/reference/view_ACS_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"View available census variables and their descriptions — view_ACS_variables","title":"View available census variables and their descriptions — view_ACS_variables","text":"View available census variables descriptions","code":""},{"path":"/reference/view_ACS_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View available census variables and their descriptions — view_ACS_variables","text":"","code":"view_ACS_variables(as_df = TRUE)"},{"path":"/reference/view_ACS_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View available census variables and their descriptions — view_ACS_variables","text":"as_df boolean. as_df = TRUE return dataframe. as_df = FALSE just print. default as_df = TRUE","code":""},{"path":"/reference/view_ACS_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View available census variables and their descriptions — view_ACS_variables","text":"Either DataFrame printed census variable codes description","code":""},{"path":"/reference/view_ACS_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View available census variables and their descriptions — view_ACS_variables","text":"","code":"if (FALSE) { library(councilverse) view_ACS_variables() view_ACS_variables(as_df = FALSE) }"}]
