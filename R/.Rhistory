table(dob$resolution_description)
table(df$agency)
table(df$agency_name)
table(dob$complaint_type)
table(df$descriptor)
unique(dob$descriptor) %>%
grep("abandoned", ignore.case = TRUE)
unique(dob$descriptor) %>%
grep("abandoned", .,ignore.case = TRUE)
unique(dob$descriptor)
hmm <- read.csv("~/Downloads/NYPD_Calls_for_Service__Year_to_Date_.csv")
View(hmm)
uni_typ <- unique(hmm$TYP_DESC)
uni_typ[grepl("building",uni_typ)]
uni_typ[grepl("building",uni_typ,ignore.case = TRUE)]
grepl("building",uni_typ,ignore.case = TRUE)
grepl("abandoned",uni_typ,ignore.case = TRUE)
uni_typ[grepl("abandoned",uni_typ,ignore.case = TRUE)]
uni_typ[grepl("train",uni_typ,ignore.case = TRUE)]
uni_typ[grepl("investigate",uni_typ,ignore.case = TRUE)]
rm(hmm)
setwd("~/Desktop/JWu_Projects/councildown")
setwd("~/Desktop/JWu_Projects/councildown/R")
?addPolygons
devtools::document()
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE)
devtools::document()
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE)
?pathOptions
?addTiles
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE) %>%
addTiles(())
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE) %>%
addTiles(
)
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE) %>%
addTiles(tileOptions(minZoom = 8, maxZoom = 13))
?markerOptions()
?leaflet
devtools::document()
library(leaflet)
leaflet(leafletOptions(minZoom = 8,maxZoom = 14)) %>%
addCouncilStyle(add_dists = TRUE)
library(leaflet)
leaflet(options = leafletOptions(minZoom = 8,maxZoom = 14)) %>%
addCouncilStyle(add_dists = TRUE)
library(leaflet)
leaflet() %>%
leaflet(options = leafletOptions(maxZoom = 14))
addCouncilStyle(add_dists = TRUE)
library(leaflet)
leaflet() %>%
leaflet(options = leafletOptions(maxZoom = 14)) %>%
addCouncilStyle(add_dists = TRUE)
devtools::document()
library(leaflet)
leaflet() %>%
addCouncilStyle(add_dists = TRUE)
devtools::document()
remotes::install_github("jdtrat/metamakr")
?usethis::create_package
setwd("~/Desktop/JWu_Projects")
usethis::create_package
usethis::create_package()
usethis::create_package(path = ".")
setwd("~/Desktop/JWu_Projects/councilverse")
usethis::create_package(path = ".")
installed.packages()[,"Package"]
"councildown" %in% installed.packages()[,"Package"]
setwd("~/Desktop/JWu_Projects/project_template/code")
source("00_load_dependencies.R")
remove.packages("councildown", lib="~/Library/R/x86_64/4.2/library")
remove.packages("councildown", lib="~/Library/R/x86_64/4.2/library")
source("00_load_dependencies.R")
system. file()
system.file()
sessionInfo()
rm(list=ls())
source("load_dependencies.R")
setwd("~/Desktop/JWu_Projects/Legistars/code/Pod3 - Tricycles")
source("load_dependencies.R")
rm(list=ls())
source("load_dependencies.R")
source_python('url_collection.py')
source("load_dependencies.R")
source_python('url_collection.py')
rm(list=ls())
source("load_dependencies.R")
# Set up driver in python instance
py_run_string('options = Options(); options.headless = True; options.add_argument("--window-size=1920,1200"); driver = webdriver.Chrome(options= options,service=Service(ChromeDriverManager().install()))')
# Start and End dates for EventDate
start_date <- paste0(format(Sys.Date(), format="%Y-%m-%d"),"T00:00:00")
end_date <- paste0(format(Sys.Date() + 30, format="%Y-%m-%d"),"T00:00:00")
# Get all the hearings from Legistar in that timerange into a dataframe
hearings <- GET(paste0("https://webapi.legistar.com/v1/nyc/Events/",
"?$filter=EventDate+ge+datetime'",
start_date,
"'+and+EventDate+le+datetime'",
end_date,
"'&token=",
api_key)) %>%
`[[`('content') %>%
rawToChar() %>%
fromJSON()
# Get all the hearings from Legistar in that timerange into a dataframe
hearings <- GET(paste0("https://webapi.legistar.com/v1/nyc/Events/",
"?$filter=EventDate+ge+datetime'",
start_date,
"'+and+EventDate+le+datetime'",
end_date,
"'&token=",
api_key)) %>%
`[[`('content') %>%
rawToChar() %>%
fromJSON()
rm(list=ls())
source("load_dependencies.R")
rm(list=ls())
source("load_dependencies.R")
rm(list=ls())
source("load_dependencies.R")
rm(list=ls())
source("load_dependencies.R")
source_python('url_collection.py')
# Set up driver in python instance
py_run_string('options = Options(); options.headless = True; options.add_argument("--window-size=1920,1200"); driver = webdriver.Chrome(options= options,service=Service(ChromeDriverManager().install()))')
# Start and End dates for EventDate
start_date <- paste0(format(Sys.Date(), format="%Y-%m-%d"),"T00:00:00")
end_date <- paste0(format(Sys.Date() + 30, format="%Y-%m-%d"),"T00:00:00")
# Get all the hearings from Legistar in that timerange into a dataframe
hearings <- GET(paste0("https://webapi.legistar.com/v1/nyc/Events/",
"?$filter=EventDate+ge+datetime'",
start_date,
"'+and+EventDate+le+datetime'",
end_date,
"'&token=",
api_key)) %>%
`[[`('content') %>%
rawToChar() %>%
fromJSON()
# FUNCTION: Filtering
filter_hearings <- function(list_of_committees = NULL, list_of_exceptions = NULL, hearing_df){
if(is.null(list_of_committees)){
first_pass <- hearing_df
} else{
# Filter main column and joint column for committee in list_of_committees
first_pass <- hearing_df[grepl(paste(list_of_committees,collapse="|"),hearing_df$EventBodyName) | grepl(paste(paste("Committee on", list_of_committees),collapse="|"),hearing_df$EventComment),]
}
# Remove the extra committees captured by regex if they exist only in EventBodyName
# (ie. the first committee listed in EventBodyName will be preceded by "Committee on ")
# Find all rows as described
eventBodyName_exclude <- vector()
if(!is.null(list_of_exceptions)){
for (i in 1:length(list_of_exceptions)) {
eventBodyName_exclude <- c(eventBodyName_exclude,grep(list_of_exceptions[i],first_pass$EventBodyName,fixed = TRUE))
}
}
# Remove those rows and reduce columns to relevant ones
if(length(eventBodyName_exclude) > 0){
final_pass <- first_pass[-eventBodyName_exclude,] %>%
apply(.,2,as.character) %>%
as.data.frame() %>%
select(EventId,EventBodyName,EventDate,EventTime,EventAgendaFile,EventComment,EventInSiteURL)
} else{
final_pass <- first_pass %>%
apply(.,2,as.character) %>%
as.data.frame() %>%
select(EventId,EventBodyName,EventDate,EventTime,EventAgendaFile,EventComment,EventInSiteURL)
}
return(final_pass)
}
# FUNCTION: Agenda Item Descriptions
agenda_item_desc_append <- function(hearing_df){
output <- hearing_df %>%
add_column(EventItemMatterId = NA,
EventItemMatterFile = NA,
MatterEXText5 = NA,
EventItemMatterLink = NA) %>%
# Arrange by hearing date
arrange(EventDate)
# Get the hearing details (using for loop) for each hearing EventID
for(hearing_ind in 1:nrow(output)){
# Get hearing agenda details
hearing_details <- GET(paste0("https://webapi.legistar.com/v1/nyc/Events/",
output$EventId[hearing_ind],
"/EventItems/",
"?token=",
api_key)) %>%
`[[`('content') %>%
rawToChar() %>%
fromJSON()
# Print hearing # working
print(paste(hearing_ind,"out of",nrow(output)))
# If hearing agenda details exists, add legislation text to hearings. Otherwise goto next EventID
if(length(hearing_details) == 0) {
next
} else{
hearing_details <- hearing_details %>%
filter(!is.na(EventItemMatterId)) %>%
arrange(EventItemAgendaSequence)
# Find all unique MatterIDs to search for legislation text
list_of_matter_ids <- unique(hearing_details$EventItemMatterId)
list_of_matter_files <- unique(hearing_details$EventItemMatterFile)
# Create dataframe to hold all the legislation
legislation_df <- data.frame(EventItemMatterId = list_of_matter_ids,
EventItemMatterFile = list_of_matter_files)
# Find legislation text for each unique MatterID
for(i in 1:length(list_of_matter_ids)){
legislation_details <- GET(paste0("https://webapi.legistar.com/v1/nyc/Matters/",
"?$filter=MatterId+eq+",
list_of_matter_ids[i],
"&token=",
api_key)) %>%
`[[`('content') %>%
rawToChar() %>%
fromJSON()
# If legislation text exists in MatterEXText5 return it, else return MatterTitle
legislation_df$MatterEXText5[i] <- ifelse(!is.na(legislation_details$MatterEXText5),legislation_details$MatterEXText5,legislation_details$MatterTitle)
# Find the legislation link
legislation_df$EventItemMatterLink[i] <- GET_leg_URL(list_of_matter_files[i],driver_input = py$driver)
}
# Collapse all the rows into one row and add them to hearing df
output$EventItemMatterId[hearing_ind] <- paste(paste0(1:nrow(legislation_df),"."),legislation_df$EventItemMatterId, collapse = "\n")
output$EventItemMatterFile[hearing_ind] <- paste(paste0(1:nrow(legislation_df),"."),legislation_df$EventItemMatterFile, collapse = "\n")
output$MatterEXText5[hearing_ind] <- paste(paste0(1:nrow(legislation_df),"."),legislation_df$MatterEXText5, collapse = "\n")
output$EventItemMatterLink[hearing_ind] <- paste(paste0(1:nrow(legislation_df),"."),legislation_df$EventItemMatterLink, collapse = "\n")
}
}
return(output)
}
extra_committees <- c("Committee on Mental Health, Disabilities and Addiction", "Special Committee on Twin Parks Citywide Taskforce on Fire Prevention")
filtered_hearings <- filter_hearings(committees,extra_committees,hearings)
filtered_hearings_final <- agenda_item_desc_append(filtered_hearings)
View(filtered_hearings_final)
filtered_hearings_final$EventItemMatterLink[1]
?gsub
gsub("[ _/.&]","-","acs_poverty")
gsub("[ _/.&]","-","acs poverty")
gsub("[ _/.&]","-","acs&poverty")
dc = c("yes","eth")
paste0(dc)
paste(dc,sep = "-")
paste(dc,sep = "-", collapse = TRUE)
?paste
paste(dc, collapse = "-")
file_name_generator <- function(description = "", year = "", disaggregation_categories = "",...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(disaggregation_categories != ""){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,year,disaggregation_categories)
return(file_name_output)
}
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
debug(file_name_generator)
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
force(disaggregation_categories)
paste0("by-",paste(disaggregation_categories, collapse = "-"))
disaggregation_categories != ""
file_name_generator <- function(description = "", year = "", disaggregation_categories = NULL,...){
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_generator <- function(description = "", year = "", disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,year,disaggregation_categories)
return(file_name_output)
}
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
file_name_generator <- function(description = "", year = "", disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,year,disaggregation_categories,sep = "_")
return(file_name_output)
}
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
file_name_generator <- function(description = "", year = "", disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,sep = "_")
return(file_name_output)
}
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
file_name_generator <- function(description = "", year = "", disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
return(file_name_output)
}
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"))
file_name_generator(description="acs_poverty", year=2019, disaggregation_categories=c("cd", "race"),"tellem")
file_name_generator(year=2019, disaggregation_categories=c("cd", "race"),"tellem")
file_name_generator(year=2019, disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
debug(file_name_generator)
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
disaggregation_categories
paste(description,disaggregation_categories,year,...,sep = "_")
?paste
paste(description,disaggregation_categories,NA_character_,...,sep = "_")
paste(description,disaggregation_categories,NA,...,sep = "_")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("_{2+}","_",file_name_output)
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("_{2,}","_",file_name_output)
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("^_|_{2,}","_",file_name_output)
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("^_&_{2,}","_",file_name_output)
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("(^_)(_{2,})","_",file_name_output)
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
?gsub
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
year = as.character(year)
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("_{2,}","_",gsub("^_","",file_name_output))
return(file_name_output)
}
file_name_generator(disaggregation_categories=c("cd", "race"),... ="tellem")
file_name_generator <- function(description = NULL, year = NULL, disaggregation_categories = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# Convert year to string (not necessary)
year = as.character(year)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- paste(description,disaggregation_categories,year,...,sep = "_")
file_name_output = gsub("_{2,}","_",gsub("^_","",file_name_output))
return(file_name_output)
}
file_name_generator(disaggregation_categories=race,... ="tellem")
file_name_generator(disaggregation_categories="race",... ="tellem")
file_name_generator(disaggregation_categories=c("race","dick"),... ="tellem")
setwd("~/Desktop/JWu_Projects/councilverse/R")
tolower(NULL)
file_name_generator <- function(order = NULL,description = NULL,time_granularity,disaggregation_categories = NULL,date_year = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- to_lower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("^_","",file_name_output))
return(file_name_output)
}
file_name_generator(order = "01", description="acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = ".csv")
?to_lower
file_name_generator <- function(order = NULL,description = NULL,time_granularity,disaggregation_categories = NULL,date_year = NULL,...){
file_name_generator <- function(order = NULL,description = NULL,time_granularity,disaggregation_categories = NULL,date_year = NULL,...){
file_name_generator <- function(order = NULL,description = NULL,time_granularity,disaggregation_categories = NULL,date_year = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("^_","",file_name_output))
return(file_name_output)
}
file_name_generator(order = "01", description="acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = ".csv")
file_name_generator <- function(order = NULL,description = NULL,time_granularity,disaggregation_categories = NULL,date_year = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output)))
return(file_name_output)
}
file_name_generator(order = "01", description="acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = ".csv")
file_name_generator(order = "01", description="acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = "example")
file_name_generator(description = "puma_internet", date_year = 2022)
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output)))
return(file_name_output)
}
file_name_generator(description = "puma_internet", date_year = 2022)
try <- mean()
try() <- mean()
try <- function(...){mean()}
try(c(3,2))
mean(3,2)
try(3,2)
try <- function(...){mean(...)}
try(3,2)
mean(4,2)
?mean
mean(c(4,2))
try <- mean(...)
try <- mean
try(c(3,4))
rm(try)
data
setwd("~/Desktop/JWu_Projects/councilverse/R")
devtools::document()
