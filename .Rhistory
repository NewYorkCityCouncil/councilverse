setwd("~/Desktop/JWu_Projects/councilverse")
devtools::load_all()
devtools::load_all()
remotes::install_github("newyorkcitycouncil/councilverse")
library(councilverse)
?file_name_generator
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = "example")
file_name_generator(description = "puma_internet", date_year = 2022)
view_ACS_variables
view_ACS_variables()
test <- get_ACS_demographic_estimates("DP05_0008PE",geo = "council",download = TRUE)
View(test)
test <- get_ACS_demographic_estimates(c("DP02_0078E","DP05_0002PE","DP05_0008PE"),geo = "nta",polygons = TRUE)
View(test)
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL, file_extension = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,file_extension,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output)))
return(file_name_output)
}
file_name_generator
file_name_generator
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, ... = "example")
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018,file_extension = ".csv" ,... = "example")
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL, file_extension = NULL,...){
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output))) + file_extension
return(file_name_output)
}
grepl("^.","csv")
grepl("^\.","csv")
grepl("^\\.","csv")
grepl("^\\.",".csv")
grepl("^\\.[1]",".csv")
grepl("^\\.(1)",".csv")
grepl("^\\.",".csv")
grepl("^\\.","..csv")
grepl("^\\.","'csv")
grepl("^\\.","\csv")
grepl("^\\.","/csv")
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL, file_extension = NULL,...){
# Warning if file_extension is not proper format if not NULL
if(!is.null(file_extension)){
if(!grepl("^\\.",file_extension)) warning('file_extension does not start with a ".". This may lead to an unexpected file name.')
}
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output = gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output))) + file_extension
return(file_name_output)
}
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018,file_extension = ".csv" ,... = "example")
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL, file_extension = NULL,...){
# Warning if file_extension is not proper format if not NULL
if(!is.null(file_extension)){
if(!grepl("^\\.",file_extension)) warning('file_extension does not start with a ".". This may lead to an unexpected file name.')
}
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output <- paste0(gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output))),file_extension)
return(file_name_output)
}
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018,file_extension = ".csv" ,... = "example")
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018,file_extension = "csv" ,... = "example")
file_name_generator <- function(order = NULL,description = NULL,time_granularity = NULL,disaggregation_categories = NULL,date_year = NULL, file_extension = NULL,...){
# Warning if file_extension is not proper format if not NULL
if(!is.null(file_extension)){
if(!grepl("^\\.",file_extension)) warning('file_extension does not start with a ".": This may lead to an unexpected file name.')
}
# Clean description
description = gsub("[ _/.&]","-",description)
# If disaggregation_categories is a vector, paste them together with hyphens
if(!is.null(disaggregation_categories)){
disaggregation_categories = paste0("by-",paste(disaggregation_categories, collapse = "-"))
}
# Paste parts together
file_name_output <- tolower(paste(order,description,time_granularity,disaggregation_categories,date_year,...,sep = "_"))
# Clean any extra '_' due to missing arguments
file_name_output <- paste0(gsub("_{2,}","_",gsub("_$","",gsub("^_","",file_name_output))),file_extension)
return(file_name_output)
}
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily", disaggregation_categories = c("cd", "race"), date_year = 2018, file_extension = ".R",... = "example")
devtools::document()
rm(list = c("file_name_generator"))
devtools::document()
devtools::load_all()
remove.packages("councildown", lib="~/Library/R/x86_64/4.2/library")
library(councilverse)
remove.packages("councilverse", lib="~/Library/R/x86_64/4.2/library")
setwd("~/Desktop/JWu_Projects/project_template")
source("code/00_load_dependencies.R")
setwd("~/Desktop/JWu_Projects/councilverse")
help(package = "councilverse")
devtools::load_all()
devtools::document()
help(package = "councilverse")
?scale_fill_nycc
library(councildown)
?scale_fill_nycc
?gt_table
?councilverse::gt_table
View(councilverse::gt_table)
library(councilverse)
file_name_generator(order = "01", description = "acs_poverty", time_granularity = "daily",
disaggregation_categories = c("cd", "race"), date_year = 2018,
file_extension = ".R",... = "example")
View(test)
?view_ACS_variables
view_ACS_variables()
?get_ACS_demographic_estimates
get_ACS_demographic_estimates(c("DP02_0078E","DP05_0002PE","DP05_0008PE"),geo = "nta",polygons = TRUE)
View(get_ACS_demographic_estimates(c("DP02_0078E","DP05_0002PE","DP05_0008PE"),geo = "nta",polygons = TRUE)
)
get_BBL_estimates()
View(get_BBL_estimates()[1:20])
get_BBL_estimates()[1:10,1:5]
get_BBL_estimates()[1:10,1:10]
councildown::nycc_cd_13
councildown::nycc_cd_13()
rm(list = ls())
library(councilverse)
view_ACS_variables()
devtools::unload(package = "councilverse")
library(councilverse)
view_ACS_variables()
devtools::load_all()
view_ACS_variables()
view_ACS_variables <- function(as_df = TRUE){
#use_python("#!/usr/local/bin/python3")
source_python('inst/python/retrieve_estimates.py')
view_variables(as_df = as_df,demo_dict = py$census_demo_variables)
}
view_ACS_variables()
devtools::load_all()
rm(list = c("view_ACS_variables"))
